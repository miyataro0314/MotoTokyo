<%= svg_tag 'moto-tokyo-logo.svg', 
    css_class: 'w-56 h-28 mt-3 absolute left-1/2 translate-x-minus-fifty z-50' %>

<div class="base-container">

  <div class="scroll-container">
    <div>
      <div class="scroll-item bg-secondary rounded-3xl">
        <span class="w-80 h-24 text-4xl font-black">
          Ride Around<br>
          Tokyo!!
        </span>
      </div>
      <p>
        東京に行くのは電車で十分？<br>
        ノンノン、東京には沢山の<br>
        ライディングスポットが眠っています！
      </p>
    </div>
    <div>
      <div class="scroll-item bg-secondary rounded-3xl">
        <span class="w-80 h-24 text-4xl font-black">
          NO Parking<br>
          No Life !!
        </span>
      </div>
      <p>
        いちいち駐車場を探す必要はありません<br>
        付近の駐車場も同時に見つけられます！
      </p>
    </div>
    <div>
      <div class="scroll-item bg-secondary rounded-3xl">
        <span class="w-80 h-24 text-4xl font-black">
          Let's pioneer<br>
          new riding spot!
        </span>
      </div>
      <p>
        お気に入りのスポットを登録して、<br>
        新しい東京のツーリングライフを開拓しよう！
      </p>
    </div>
  </div>
  
  <style>
  .scroll-container {
    display: flex;
    overflow-x: scroll;
    scroll-snap-type: x mandatory;
    padding: 0 36px;
    position: relative;
    margin-top: 80px;
    gap: 20px;
    scrollbar-width: none; 
  }
  .scroll-container::before,
  .scroll-container::after {
    content: '';
    flex: 0 0 12.5%;
    height: 1px;
  }
  .scroll-item {
    width: 208px;
    height: 320px;
    flex-shrink: 0;
    border-radius: 24px;
    border: 1px solid #000;
    background-color: #e2e8f0;
    scroll-snap-align: center;
    position: relative;
  }
  .scroll-item: {
    margin-right: 12.5%; /* 各アイテム間の隙間をコンテナの1/8に設定 */
  }
  .scroll-item span {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    white-space: nowrap;
    transition: opacity 0.1s ease;
  }
  .scroll-container p {
    width: 100%;
    text-align: center;
    margin-top: 10px; /* 必要に応じて調整 */
  }
</style>


<script>
  const container = document.querySelector('.scroll-container');
  const spans = document.querySelectorAll('.scroll-item span');
  const paragraphs = document.querySelectorAll('.scroll-container p');

  let targetScales = [];
  let currentScales = [];

  paragraphs.forEach(() => {
    targetScales.push({ scale: 1, opacity: 1 });
    currentScales.push({ scale: 1, opacity: 1 });
  });

  container.addEventListener('scroll', () => {
    const containerRect = container.getBoundingClientRect();
    const containerCenter = containerRect.left + containerRect.width / 2;

    spans.forEach((span) => {
      const itemRect = span.parentElement.getBoundingClientRect();
      const itemCenter = itemRect.left + itemRect.width / 2;
      const distance = Math.abs(containerCenter - itemCenter);
      const maxDistance = containerRect.width / 2;
      const normalizedDistance = Math.min(distance / maxDistance, 1);
      const spanScale = 1 - normalizedDistance ** 2
      const parentScale = 1- normalizedDistance ** 2 / 10
      span.style.transform = `translateX(-50%) scale(${spanScale})`;
      span.style.opacity = spanScale;
      span.parentElement.style.transform = `scale(${parentScale})`;
    });

    paragraphs.forEach((paragraph) => {
      const itemRect = paragraph.getBoundingClientRect();
      const itemCenter = itemRect.left + itemRect.width / 2;
      const distance = Math.abs(containerCenter - itemCenter);
      const maxDistance = containerRect.width / 2;
      const normalizedDistance = Math.min(distance / maxDistance, 1);
      const paragraphScale = 1 - normalizedDistance ** 1.5;
      paragraph.style.transform = `scale(${paragraphScale})`;
      paragraph.style.opacity = paragraphScale;
    });

    function animate() {
    paragraphs.forEach((paragraph, index) => {
      currentScales[index].scale += (targetScales[index].scale - currentScales[index].scale) * 0.1;
      currentScales[index].opacity += (targetScales[index].opacity - currentScales[index].opacity) * 0.1;

      paragraph.style.transform = `scale(${currentScales[index].scale})`;
      paragraph.style.opacity = currentScales[index].opacity;
    });

    requestAnimationFrame(animate);
  }
  });
</script>


  

  <div class="base-m mt-8 text-primary-content">
    <div>
      <p>
        会員登録して<br>
        お気に入りのスポットを登録する
      </p>
      <%= link_to '新規会員登録', new_user_registration_path,
          class: 'btn-secondary' %>
    </div>
    <div class="mt-3">
      <p>既にご登録済みの方は</p>
      <%= link_to 'ログイン', new_user_session_path, class: 'btn-secondary' %>
    </div>
  </div>
</div>